package com.cap.productsvalidation.productvalidationmanagement.dataaccess.impl.dao;

import java.util.List;

import com.cap.productsvalidation.general.common.api.constants.NamedQueries;
import com.cap.productsvalidation.general.dataaccess.base.dao.ApplicationDaoImpl;
import com.cap.productsvalidation.productvalidationmanagement.dataaccess.api.dao.ProductValidationDao;
import com.cap.productsvalidation.productvalidationmanagement.dataaccess.api.ProductValidationEntity;
import com.cap.productsvalidation.productvalidationmanagement.logic.api.to.ProductValidationSearchCriteriaTo;

import io.oasp.module.jpa.common.api.to.PaginatedListTo;

import javax.inject.Named;

import com.mysema.query.alias.Alias;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.EntityPathBase;

/**
 * This is the implementation of {@link ProductValidationDao}.
 */
@Named
public class ProductValidationDaoImpl extends ApplicationDaoImpl<ProductValidationEntity> implements ProductValidationDao {

	/**
	* The constructor.
	*/
	public ProductValidationDaoImpl() {

		super();
	}

  @Override
  public Class<ProductValidationEntity> getEntityClass() {
  	return ProductValidationEntity.class;
 	}

 	@Override
  public PaginatedListTo<ProductValidationEntity> findProductValidations(ProductValidationSearchCriteriaTo criteria) {

    ProductValidationEntity productvalidation = Alias.alias(ProductValidationEntity.class);
    EntityPathBase<ProductValidationEntity> alias = Alias.$(productvalidation);
    JPAQuery query = new JPAQuery(getEntityManager()).from(alias);

        String name = criteria.getName();
if (name != null) {
query.where(Alias.$(productvalidation.getName()).eq(name));
}        String version = criteria.getVersion();
if (version != null) {
query.where(Alias.$(productvalidation.getVersion()).eq(version));
}    addOrderBy(query, alias, productvalidation, criteria.getSort());

    return findPaginated(criteria, query, alias);
  }

  private void addOrderBy(JPAQuery query, EntityPathBase<ProductValidationEntity> alias, ProductValidationEntity productvalidation, List<OrderByTo> sort) {
    if (sort != null && !sort.isEmpty()) {
      for (OrderByTo orderEntry : sort) {
        switch(orderEntry.getName()) {
          case "name":
            if (OrderDirection.ASC.equals(orderEntry.getDirection())) {
                query.orderBy(Alias.$(productvalidation.getName()).asc());
            } else {
                query.orderBy(Alias.$(productvalidation.getName()).desc());
            }   
          break;
          case "version":
            if (OrderDirection.ASC.equals(orderEntry.getDirection())) {
                query.orderBy(Alias.$(productvalidation.getVersion()).asc());
            } else {
                query.orderBy(Alias.$(productvalidation.getVersion()).desc());
            }   
          break;
        }
      }
    }
  }

}