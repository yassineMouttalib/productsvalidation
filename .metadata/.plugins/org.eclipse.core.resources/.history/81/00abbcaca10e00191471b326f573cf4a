package com.cap.productsvalidation.testsstepmanagement.assertstepmanagement.logic.impl;

import com.cap.productsvalidation.testsstepmanagement.general.logic.base.AbstractComponentFacade;
import com.cap.productsvalidation.testsstepmanagement.general.common.api.constants.PermissionConstants;
import com.cap.productsvalidation.testsstepmanagement.assertstepmanagement.dataaccess.api.AssertstepEntity;
import com.cap.productsvalidation.testsstepmanagement.assertstepmanagement.dataaccess.api.dao.AssertstepDao;
import com.cap.productsvalidation.testsstepmanagement.assertstepmanagement.logic.api.Assertstepmanagement;
import com.cap.productsvalidation.testsstepmanagement.assertstepmanagement.logic.api.to.AssertstepEto;
import com.cap.productsvalidation.testsstepmanagement.assertstepmanagement.logic.api.to.AssertstepSearchCriteriaTo;

import io.oasp.module.jpa.common.api.to.PaginatedListTo;

import java.util.List;
import java.util.Objects;

import javax.inject.Inject;
import javax.inject.Named;
import javax.annotation.security.RolesAllowed;

import org.springframework.transaction.annotation.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Implementation of component interface of assertstepmanagement
 */
@Named
@Transactional
public class AssertstepmanagementImpl extends AbstractComponentFacade implements Assertstepmanagement {
	
	/** Logger instance. */
  private static final Logger LOG = LoggerFactory.getLogger(AssertstepmanagementImpl.class);

  /** @see #getAssertstepDao() */
  @Inject
  private AssertstepDao assertstepDao;

  /**
   * The constructor.
   */
  public AssertstepmanagementImpl() {
      super();
  }
  
	@Override
	public AssertstepEto findAssertstep(Long id) {
		LOG.debug("Get Assertstep with id {} from database.", id);
		return getBeanMapper().map(getAssertstepDao().findOne(id), AssertstepEto.class);
	}

	@Override
	public PaginatedListTo<AssertstepEto> findAssertstepEtos(AssertstepSearchCriteriaTo criteria) {
		criteria.limitMaximumPageSize(MAXIMUM_HIT_LIMIT);
		PaginatedListTo<AssertstepEntity> assertsteps = getAssertstepDao().findAssertsteps(criteria);
		return mapPaginatedEntityList(assertsteps, AssertstepEto.class);
	}

	@Override
	public boolean deleteAssertstep(Long assertstepId) {
		AssertstepEntity assertstep = getAssertstepDao().find(assertstepId);
		getAssertstepDao().delete(assertstep);
		LOG.debug("The assertstep with id '{}' has been deleted.", assertstepId);
		return true;
	}

	@Override
	public AssertstepEto saveAssertstep(AssertstepEto assertstep) {
		Objects.requireNonNull(assertstep, "assertstep");
		AssertstepEntity assertstepEntity = getBeanMapper().map(assertstep, AssertstepEntity.class);

		//initialize, validate assertstepEntity here if necessary
		AssertstepEntity resultEntity = getAssertstepDao().save(assertstepEntity);
		LOG.debug("Assertstep with id '{}' has been created.", resultEntity.getId());

		return getBeanMapper().map(resultEntity, AssertstepEto.class);
	}

	/**
	 * Returns the field 'assertstepDao'.
	 * @return the {@link AssertstepDao} instance.
	 */
	public AssertstepDao getAssertstepDao() {

		return this.assertstepDao;
	}
		
	@Override
  public AssertstepCto findAssertstepCto(Long id) {
    LOG.debug("Get AssertstepCto with id {} from database.", id);
    AssertstepEntity entity = getAssertstepDao().findOne(id);
    AssertstepCto cto = new AssertstepCto();
    cto.setAssertstep(getBeanMapper().map(entity, AssertstepEto.class));
 
    return cto;
  }

  @Override
  public PaginatedListTo<AssertstepCto> findAssertstepCtos(AssertstepSearchCriteriaTo criteria) {
    criteria.limitMaximumPageSize(MAXIMUM_HIT_LIMIT);
    PaginatedListTo<AssertstepEntity> assertsteps = getAssertstepDao().findAssertsteps(criteria);
    List<AssertstepCto> ctos = new ArrayList<>();
    for (AssertstepEntity entity : assertsteps.getResult()) {
      AssertstepCto cto = new AssertstepCto();
      cto.setAssertstep(getBeanMapper().map(entity, AssertstepEto.class));
      ctos.add(cto);
      
    }
    PaginationResultTo pagResultTo = new PaginationResultTo(criteria.getPagination(), (long) ctos.size());
    PaginatedListTo<AssertstepCto> pagListTo = new PaginatedListTo(ctos, pagResultTo);
    return pagListTo;
  }


}