package com.cap.productsvalidation.testsstepmanagement.reststepmanagement.logic.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.inject.Inject;
import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;

import com.cap.productsvalidation.testsstepmanagement.general.logic.base.AbstractComponentFacade;
import com.cap.productsvalidation.testsstepmanagement.reststepmanagement.dataaccess.api.ReststepEntity;
import com.cap.productsvalidation.testsstepmanagement.reststepmanagement.dataaccess.api.dao.ReststepDao;
import com.cap.productsvalidation.testsstepmanagement.reststepmanagement.logic.api.Reststepmanagement;
import com.cap.productsvalidation.testsstepmanagement.reststepmanagement.logic.api.to.ReststepCto;
import com.cap.productsvalidation.testsstepmanagement.reststepmanagement.logic.api.to.ReststepEto;
import com.cap.productsvalidation.testsstepmanagement.reststepmanagement.logic.api.to.ReststepSearchCriteriaTo;

import io.oasp.module.jpa.common.api.to.PaginatedListTo;
import io.oasp.module.jpa.common.api.to.PaginationResultTo;

/**
 * Implementation of component interface of reststepmanagement
 */
@Named
@Transactional
public class ReststepmanagementImpl extends AbstractComponentFacade implements Reststepmanagement {

	/** Logger instance. */
	private static final Logger LOG = LoggerFactory.getLogger(ReststepmanagementImpl.class);

	/** @see #getReststepDao() */
	@Inject
	private ReststepDao reststepDao;

	/**
	 * The constructor.
	 */
	public ReststepmanagementImpl() {
		super();
	}

	@Override
	public ReststepEto findReststep(Long id) {
		LOG.debug("Get Reststep with id {} from database.", id);
		return getBeanMapper().map(getReststepDao().findOne(id), ReststepEto.class);
	}

	@Override
	public PaginatedListTo<ReststepEto> findReststepEtos(ReststepSearchCriteriaTo criteria) {
		criteria.limitMaximumPageSize(MAXIMUM_HIT_LIMIT);
		PaginatedListTo<ReststepEntity> reststeps = getReststepDao().findReststeps(criteria);
		return mapPaginatedEntityList(reststeps, ReststepEto.class);
	}

	@Override
	public boolean deleteReststep(Long reststepId) {
		ReststepEntity reststep = getReststepDao().find(reststepId);
		getReststepDao().delete(reststep);
		LOG.debug("The reststep with id '{}' has been deleted.", reststepId);
		return true;
	}

	@Override
	public ReststepEto saveReststep(ReststepEto reststep) {
		Objects.requireNonNull(reststep, "reststep");
		ReststepEntity reststepEntity = getBeanMapper().map(reststep, ReststepEntity.class);

		// initialize, validate reststepEntity here if necessary
		ReststepEntity resultEntity = getReststepDao().save(reststepEntity);
		LOG.debug("Reststep with id '{}' has been created.", resultEntity.getId());

		return getBeanMapper().map(resultEntity, ReststepEto.class);
	}

	/**
	 * Returns the field 'reststepDao'.
	 * 
	 * @return the {@link ReststepDao} instance.
	 */
	public ReststepDao getReststepDao() {

		return this.reststepDao;
	}

	@Override
	public ReststepCto findReststepCto(Long id) {
		LOG.debug("Get ReststepCto with id {} from database.", id);
		ReststepEntity entity = getReststepDao().findOne(id);
		ReststepCto cto = new ReststepCto();
		cto.setReststep(getBeanMapper().map(entity, ReststepEto.class));

		return cto;
	}

	@Override
	public PaginatedListTo<ReststepCto> findReststepCtos(ReststepSearchCriteriaTo criteria) {
		criteria.limitMaximumPageSize(MAXIMUM_HIT_LIMIT);
		PaginatedListTo<ReststepEntity> reststeps = getReststepDao().findReststeps(criteria);
		List<ReststepCto> ctos = new ArrayList<>();
		for (ReststepEntity entity : reststeps.getResult()) {
			ReststepCto cto = new ReststepCto();
			cto.setReststep(getBeanMapper().map(entity, ReststepEto.class));
			ctos.add(cto);

		}
		PaginationResultTo pagResultTo = new PaginationResultTo(criteria.getPagination(), (long) ctos.size());
		PaginatedListTo<ReststepCto> pagListTo = new PaginatedListTo(ctos, pagResultTo);
		return pagListTo;
	}

}