package com.cap.productvalidation.testsstepmanagement.assertstepmanagement.logic.impl.usecase;

import java.util.Optional;

import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.cap.productvalidation.testsstepmanagement.assertstepmanagement.dataaccess.api.AssertstepEntity;
import com.cap.productvalidation.testsstepmanagement.assertstepmanagement.logic.api.to.AssertstepEto;
import com.cap.productvalidation.testsstepmanagement.assertstepmanagement.logic.api.to.AssertstepSearchCriteriaTo;
import com.cap.productvalidation.testsstepmanagement.assertstepmanagement.logic.api.usecase.UcFindAssertstep;
import com.cap.productvalidation.testsstepmanagement.assertstepmanagement.logic.base.usecase.AbstractAssertstepUc;

/**
 * Use case implementation for searching, filtering and getting Assertsteps
 */
@Named
@Validated
@Transactional
public class UcFindAssertstepImpl extends AbstractAssertstepUc implements UcFindAssertstep {

	  /** Logger instance. */
    private static final Logger LOG = LoggerFactory.getLogger(UcFindAssertstepImpl.class);


    @Override
    public AssertstepEto findAssertstep(long id) {
      LOG.debug("Get Assertstep with id {} from database.", id);
      Optional<AssertstepEntity> foundEntity = getAssertstepRepository().findById(id);
      if (foundEntity.isPresent())
        return getBeanMapper().map(foundEntity.get(), AssertstepEto.class);
      else
        return null;
    }

    @Override
    public Page<AssertstepEto> findAssertsteps(AssertstepSearchCriteriaTo criteria) {
      Page<AssertstepEntity> assertsteps = getAssertstepRepository().findByCriteria(criteria);
    return mapPaginatedEntityList(assertsteps, AssertstepEto.class);
  }

}
