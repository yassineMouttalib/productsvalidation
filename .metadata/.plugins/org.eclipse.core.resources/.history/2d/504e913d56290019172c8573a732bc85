package com.cap.productvalidation.testscasesmanagement.dataaccess.api.repo;

import static com.querydsl.core.alias.Alias.$;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.querydsl.jpa.impl.JPAQuery;
import java.util.Iterator;

import com.cap.productvalidation.testscasesmanagement.common.api.Testscases;
import com.cap.productvalidation.testscasesmanagement.dataaccess.api.TestscasesEntity;
import com.cap.productvalidation.testscasesmanagement.logic.api.to.TestscasesSearchCriteriaTo;
import com.devonfw.module.jpa.dataaccess.api.QueryUtil;
import com.devonfw.module.jpa.dataaccess.api.data.DefaultRepository;

/**
 * {@link DefaultRepository} for {@link TestscasesEntity}
  */
public interface TestscasesRepository extends DefaultRepository<TestscasesEntity> {

  /**
   * @param criteria the {@link TestscasesSearchCriteriaTo} with the criteria to search.
   * @param pageRequest {@link Pageable} implementation used to set page properties like page size
   * @return the {@link Page} of the {@link TestscasesEntity} objects that matched the search.
   */
  default Page<TestscasesEntity> findByCriteria(TestscasesSearchCriteriaTo criteria) {

    TestscasesEntity alias = newDslAlias();
    JPAQuery<TestscasesEntity> query = newDslQuery(alias);

String name = criteria.getName();
if (name != null && !name.isEmpty()) {
QueryUtil.get().whereString(query, $(alias.getName()), name, criteria.getNameOption());
}String description = criteria.getDescription();
if (description != null && !description.isEmpty()) {
QueryUtil.get().whereString(query, $(alias.getDescription()), description, criteria.getDescriptionOption());
}Long productvalidation = criteria.getProductvalidationId();
if(productvalidation != null) {
query.where($(alias.getProductvalidation().getId()).eq(productvalidation));
}    addOrderBy(query, alias, criteria.getPageable().getSort());
    
    return QueryUtil.get().findPaginated(criteria.getPageable(), query, true);
  }
  
  /**
   * Add sorting to the given query on the given alias
   * 
   * @param query to add sorting to
   * @param alias to retrieve columns from for sorting
   * @param sort specification of sorting
   */
  public default void addOrderBy(JPAQuery<TestscasesEntity> query, TestscasesEntity alias, Sort sort) {
    if (sort != null && sort.isSorted()) {
      Iterator<Order> it = sort.iterator();
      while (it.hasNext()) {
        Order next = it.next();
        switch(next.getProperty()) {
          case "name":
            if (next.isAscending()) {
                query.orderBy($(alias.getName()).asc());
            } else {
                query.orderBy($(alias.getName()).desc());
            }   
          break;
          case "description":
            if (next.isAscending()) {
                query.orderBy($(alias.getDescription()).asc());
            } else {
                query.orderBy($(alias.getDescription()).desc());
            }   
          break;
          case "productvalidation":
            if (next.isAscending()) {
                query.orderBy($(alias.getProductvalidation().getId()).asc());
            } else {
                query.orderBy($(alias.getProductvalidation().getId()).desc());
            }   
          break;
          default:
            throw new IllegalArgumentException("Sorted by the unknown property '"+next.getProperty()+"'");
        }
      }
    }
}

}