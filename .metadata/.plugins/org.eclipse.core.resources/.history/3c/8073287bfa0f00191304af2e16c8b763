package com.cap.productsvalidation.amanagement.dataaccess.impl.dao;

import java.util.List;

import javax.inject.Named;

import com.cap.productsvalidation.amanagement.dataaccess.api.TaEntity;
import com.cap.productsvalidation.amanagement.dataaccess.api.dao.TaDao;
import com.cap.productsvalidation.amanagement.logic.api.to.TaSearchCriteriaTo;
import com.cap.productsvalidation.general.dataaccess.base.dao.ApplicationDaoImpl;
import com.mysema.query.alias.Alias;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.EntityPathBase;

import io.oasp.module.jpa.common.api.to.OrderByTo;
import io.oasp.module.jpa.common.api.to.OrderDirection;
import io.oasp.module.jpa.common.api.to.PaginatedListTo;

/**
 * This is the implementation of {@link TaDao}.
 */
@Named
public class TaDaoImpl extends ApplicationDaoImpl<TaEntity> implements TaDao {

	/**
	 * The constructor.
	 */
	public TaDaoImpl() {

		super();
	}

	@Override
	public Class<TaEntity> getEntityClass() {
		return TaEntity.class;
	}

	@Override
	public PaginatedListTo<TaEntity> findTas(TaSearchCriteriaTo criteria) {

		TaEntity ta = Alias.alias(TaEntity.class);
		EntityPathBase<TaEntity> alias = Alias.$(ta);
		JPAQuery query = new JPAQuery(getEntityManager()).from(alias);

		String note = criteria.getNote();
		if (note != null) {
			query.where(Alias.$(ta.getNote()).eq(note));
		}
		addOrderBy(query, alias, ta, criteria.getSort());

		return findPaginated(criteria, query, alias);
	}

	private void addOrderBy(JPAQuery query, EntityPathBase<TaEntity> alias, TaEntity ta, List<OrderByTo> sort) {
		if (sort != null && !sort.isEmpty()) {
			for (OrderByTo orderEntry : sort) {
				switch (orderEntry.getName()) {
				case "note":
					if (OrderDirection.ASC.equals(orderEntry.getDirection())) {
						query.orderBy(Alias.$(ta.getNote()).asc());
					} else {
						query.orderBy(Alias.$(ta.getNote()).desc());
					}
					break;
				}
			}
		}
	}

}