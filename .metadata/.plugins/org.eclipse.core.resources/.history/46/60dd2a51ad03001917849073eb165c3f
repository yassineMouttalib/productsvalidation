package com.cap.productsvalidation.productvalidationmanagement.logic.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.inject.Inject;
import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;

import com.cap.productsvalidation.general.logic.base.AbstractComponentFacade;
import com.cap.productsvalidation.productvalidationmanagement.dataaccess.api.ProductValidationEntity;
import com.cap.productsvalidation.productvalidationmanagement.dataaccess.api.dao.ProductValidationDao;
import com.cap.productsvalidation.productvalidationmanagement.logic.api.Productvalidationmanagement;
import com.cap.productsvalidation.productvalidationmanagement.logic.api.to.ProductValidationCto;
import com.cap.productsvalidation.productvalidationmanagement.logic.api.to.ProductValidationEto;
import com.cap.productsvalidation.productvalidationmanagement.logic.api.to.ProductValidationSearchCriteriaTo;
import com.cap.productsvalidation.testscasesmanagement.logic.api.to.TestscasesEto;

import io.oasp.module.jpa.common.api.to.PaginatedListTo;
import io.oasp.module.jpa.common.api.to.PaginationResultTo;

/**
 * Implementation of component interface of productvalidationmanagement
 */
@Named
@Transactional
public class ProductvalidationmanagementImpl extends AbstractComponentFacade implements Productvalidationmanagement {

	/** Logger instance. */
	private static final Logger LOG = LoggerFactory.getLogger(ProductvalidationmanagementImpl.class);

	/** @see #getProductValidationDao() */
	@Inject
	private ProductValidationDao productValidationDao;

	/**
	 * The constructor.
	 */
	public ProductvalidationmanagementImpl() {
		super();
	}

	@Override
	public ProductValidationEto findProductValidation(Long id) {
		LOG.debug("Get ProductValidation with id {} from database.", id);
		return getBeanMapper().map(getProductValidationDao().findOne(id), ProductValidationEto.class);
	}

	@Override
	public PaginatedListTo<ProductValidationEto> findProductValidationEtos(ProductValidationSearchCriteriaTo criteria) {
		criteria.limitMaximumPageSize(MAXIMUM_HIT_LIMIT);
		PaginatedListTo<ProductValidationEntity> productvalidations = getProductValidationDao()
				.findProductValidations(criteria);
		return mapPaginatedEntityList(productvalidations, ProductValidationEto.class);
	}

	@Override
	public boolean deleteProductValidation(Long productValidationId) {
		ProductValidationEntity productValidation = getProductValidationDao().find(productValidationId);
		getProductValidationDao().delete(productValidation);
		LOG.debug("The productValidation with id '{}' has been deleted.", productValidationId);
		return true;
	}

	@Override
	public ProductValidationEto saveProductValidation(ProductValidationEto productValidation) {
		Objects.requireNonNull(productValidation, "productValidation");
		ProductValidationEntity productValidationEntity = getBeanMapper().map(productValidation,
				ProductValidationEntity.class);

		// initialize, validate productValidationEntity here if necessary
		ProductValidationEntity resultEntity = getProductValidationDao().save(productValidationEntity);
		LOG.debug("ProductValidation with id '{}' has been created.", resultEntity.getId());

		return getBeanMapper().map(resultEntity, ProductValidationEto.class);
	}

	/**
	 * Returns the field 'productValidationDao'.
	 * 
	 * @return the {@link ProductValidationDao} instance.
	 */
	public ProductValidationDao getProductValidationDao() {

		return this.productValidationDao;
	}

	@Override
	public ProductValidationCto findProductValidationCto(Long id) {
		LOG.debug("Get ProductValidationCto with id {} from database.", id);
		ProductValidationEntity entity = getProductValidationDao().findOne(id);
		ProductValidationCto cto = new ProductValidationCto();
		cto.setProductValidation(getBeanMapper().map(entity, ProductValidationEto.class));
		cto.setTestscases(getBeanMapper().mapList(entity.getTestscases(), TestscasesEto.class));

		return cto;
	}

	@Override
	public PaginatedListTo<ProductValidationCto> findProductValidationCtos(ProductValidationSearchCriteriaTo criteria) {
		criteria.limitMaximumPageSize(MAXIMUM_HIT_LIMIT);
		PaginatedListTo<ProductValidationEntity> productvalidations = getProductValidationDao()
				.findProductValidations(criteria);
		List<ProductValidationCto> ctos = new ArrayList<>();
		for (ProductValidationEntity entity : productvalidations.getResult()) {
			ProductValidationCto cto = new ProductValidationCto();
			cto.setProductValidation(getBeanMapper().map(entity, ProductValidationEto.class));
			cto.setTestscases((ArrayList<TestscasesEto>) getBeanMapper().mapList(entity.getTestscases(), TestscasesEto.class));
			ctos.add(cto);

		}
		PaginationResultTo pagResultTo = new PaginationResultTo(criteria.getPagination(), (long) ctos.size());
		PaginatedListTo<ProductValidationCto> pagListTo = new PaginatedListTo(ctos, pagResultTo);
		return pagListTo;
	}

}